This file lists notes on how different browsers implemented edge cases in the ECMAScript regex specification:

=======
test262
=======

Chrome passes all tests in 15.10.

Firefox fails S15.10.2.12_A[12]_T1
In particular \s does not include the zero-width no-break space character with character code 0xfeff.

=====================
Quantified assertions
=====================

The grammar in section 15.10.1 (http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.1) states explicitly
that quantifiers can only be applied to Atoms, which don't include Assertions (all forms of 0-width constructs).
While at least Chrome and Firefox seem to adhere to this when it comes to ^, $ and \b, they do allow (at least)
a ?-quantifier after a lookahead. Moreover, in that case they seem to optimise out the lookahead (as it cannot
affect the match), so that capturing groups inside the lookahead are always undefined (even if the lookahead
would match).

Test snippets:

/^?a/.exec("a")
/a$?/.exec("a")
/a\b?/.exec("a")
/a\B?/.exec("a")
/a(?=b(c))?/.exec("a")
/a(?=b(c))?/.exec("abc")
/a(?!b)?/.exec("ab")

===================
Escaping c, x and u
===================

I am not quite sure how to interpret the standard here, but in any case the implementations are inconsistent.
(More details to follow)

=====================================
Escape sequences in character classes
=====================================

The standard specifies in section 15.10.2.19, that backreferences and the \B espace sequence should raise an error
inside a character class. However, browser seem to treat \B in a character class as B and backreference-like
escape sequences as octal ones.

Test snippets:

for(var i = 0; i < 0xFFFF; i++) if(/[\B]/.test(String.fromCharCode(i))) console.log(i, i.toString(16), String.fromCharCode(i))
for(var i = 0; i < 0xFFFF; i++) if(/[\1]/.test(String.fromCharCode(i))) console.log(i, i.toString(16), String.fromCharCode(i))
for(var i = 0; i < 0xFFFF; i++) if(/[\5]/.test(String.fromCharCode(i))) console.log(i, i.toString(16), String.fromCharCode(i))

===================================
Nested character classes and ranges
===================================

Putting a built-in character class inside a normal character class next to a hyphen is generally undefined behavior.
Accordingly, browsers handle this quite differently.

Chrome:
Hyphens next to built-in character classes are treated as literal hyphens. There is one odd case, where consecutive
hyphens *after* a character class are all literal ones. So:
[\0--\d] matches everything from \0 to - and digits
[\0-\d] matches only \0, - and digits
[--\d] matches - and digits
[-\d] matches - and digits
[\d-] matches - and digits
[\d--] matches - and digits
[\d-0] matches - and digits (as 0 is already included in \d)
[\d---] matches - and digits
[\d---0] matches - and digits (as 0 is already included in \d)
These last cases show that Chrome does not start reading ranges again, although a second or third hyphen (after the
first one that's literal) could theoretically be treated as range.

At least the cases like [--\d] are technically in breach with the standard as it specifies that an exception is to be
thrown if either end of the range is a group (15.10.2.15, third enumeration, point 1).

Firefox:
Hyphens in front of built-in character classes raise an error (unless the hyphen is a literal one for other reasons).
Hyphens after a built-in character class are treated literally. Oddly enough, it seems that the first two hyphens are
treated literally AND cannot be included in a range, so that only the fourth one starts creating ranges again. Hence
[\d-0]
[\d--0] and
[\d---0] match only - and 0
while
[\d----0] (as well as any greater even number of hyphens) match . and / (from the - to 0 range) as well.




================
Unmatched braces
================

Unescaped braces are only treated as quantifiers if they form a syntactically correct quantifier. If they do not
(e.g. they are unmatched at the current nesting level, or their contents are not of the format "m" or "m," or "m,n"),
they are always treated as literal braces.

Test snippets:

/a\{2}/.exec("a{2}")
/a{2\}/.exec("a{2}")
/a{2/.exec("a{2")
/a2}/.exec("a2}")
/a{2(})/.exec("a{2}")
/a({)2}/.exec("a{2}")
/a{2,a}/.exec("a{2,a}")
/a{2,()}/.exec("a{2}")
/a{a}/.exec("a{a}")

This includes missing minimum values:

/a{,2}/.exec("a{,2}") // matches the entire input string