// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.Quantifier = (function(_super) {

    __extends(Quantifier, _super);

    function Quantifier(debug, token, min, max) {
      this.min = min;
      this.max = max;
      Quantifier.__super__.constructor.call(this, debug, token);
      this.minGroup = -1;
      this.nGroups = 0;
      this.clearer = [];
    }

    Quantifier.prototype.reset = function() {
      Quantifier.__super__.reset.call(this);
      this.instances = [this.clone(this.subtokens[0])];
      this.pos = [];
      this.result = false;
      return this.captureStack = [];
    };

    Quantifier.prototype.setGroupRange = function(minGroup, nGroups) {
      var i, _i, _ref, _results;
      this.minGroup = minGroup;
      this.nGroups = nGroups;
      _results = [];
      for (i = _i = 0, _ref = this.nGroups; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.clearer[i] = void 0);
      }
      return _results;
    };

    Quantifier.prototype.nextMatch = function(state, report) {
      var instance, result, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (this.result) {
        result = this.result;
        this.result = false;
        if (this.instances.length >= this.min) {
          return result;
        } else {
          return 0;
        }
      }
      if (this.instances.length === 0) {
        this.reset();
        return false;
      }
      if (this.instances.length > this.max) {
        this.instances.pop();
        result = state.currentPosition;
        if (this.pos.length > 0) {
          state.currentPosition = this.pos.pop();
        }
        if (this.captureStack.length > 0) {
          [].splice.apply(state.captures, [(_ref = this.minGroup), (this.minGroup + this.nGroups) - _ref].concat(_ref1 = this.captureStack.pop())), _ref1;
        }
        return result;
      }
      instance = this.instances.pop();
      result = instance.nextMatch(state, report);
      switch (result) {
        case 0:
        case -1:
          this.instances.push(instance);
          return result;
        case false:
          this.result = state.currentPosition;
          if (this.pos.length > 0) {
            state.currentPosition = this.pos.pop();
          }
          if (this.captureStack.length > 0) {
            [].splice.apply(state.captures, [(_ref2 = this.minGroup), (this.minGroup + this.nGroups) - _ref2].concat(_ref3 = this.captureStack.pop())), _ref3;
          }
          return 0;
        default:
          this.instances.push(instance);
          if (result === state.currentPosition && this.instances.length > this.min) {
            return this.nextMatch(state, report);
          }
          this.captureStack.push(state.captures.slice(this.minGroup, this.minGroup + this.nGroups));
          [].splice.apply(state.captures, [(_ref4 = this.minGroup), (this.minGroup + this.nGroups) - _ref4].concat(_ref5 = this.clearer)), _ref5;
          this.instances.push(this.clone(this.subtokens[0]));
          this.pos.push(state.currentPosition);
          state.currentPosition = result;
          return -1;
      }
    };

    Quantifier.prototype.clone = function(obj) {
      var key, newInstance;
      if (!(obj != null) || typeof obj !== 'object') {
        return obj;
      }
      newInstance = new obj.constructor();
      for (key in obj) {
        newInstance[key] = this.clone(obj[key]);
      }
      return newInstance;
    };

    return Quantifier;

  })(root.Token);

  root.Option = (function(_super) {

    __extends(Option, _super);

    function Option(debug, token) {
      Option.__super__.constructor.call(this, debug, token, 0, 1);
    }

    return Option;

  })(root.Quantifier);

  root.RepeatZeroOrMore = (function(_super) {

    __extends(RepeatZeroOrMore, _super);

    function RepeatZeroOrMore(debug, token) {
      RepeatZeroOrMore.__super__.constructor.call(this, debug, token, 0, Infinity);
    }

    return RepeatZeroOrMore;

  })(root.Quantifier);

  root.RepeatOneOrMore = (function(_super) {

    __extends(RepeatOneOrMore, _super);

    function RepeatOneOrMore(debug, token) {
      RepeatOneOrMore.__super__.constructor.call(this, debug, token, 1, Infinity);
    }

    return RepeatOneOrMore;

  })(root.Quantifier);

}).call(this);
