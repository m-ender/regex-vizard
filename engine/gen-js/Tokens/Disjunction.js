// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.Disjunction = (function(_super) {

    __extends(Disjunction, _super);

    function Disjunction(debug, token) {
      Disjunction.__super__.constructor.apply(this, arguments);
    }

    Disjunction.prototype.reset = function(state) {
      Disjunction.__super__.reset.apply(this, arguments);
      return state.tokens[this.debug.id].i = 0;
    };

    Disjunction.prototype.setupStateObject = function() {
      return {
        type: 'disjunction',
        status: Inactive,
        i: 0
      };
    };

    Disjunction.prototype.nextMatch = function(state) {
      var result, tokenState;
      tokenState = state.tokens[this.debug.id];
      if (tokenState.i === this.subtokens.length) {
        this.reset(state);
        return new Result(Failure);
      }
      result = this.subtokens[tokenState.i].nextMatch(state);
      switch (result.type) {
        case Success:
        case Indeterminate:
          return result;
        case Failure:
          ++tokenState.i;
          return new Result(Indeterminate);
      }
    };

    return Disjunction;

  })(root.Token);

}).call(this);
