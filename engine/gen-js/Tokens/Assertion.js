// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.StartAnchor = (function(_super) {

    __extends(StartAnchor, _super);

    function StartAnchor(debug) {
      StartAnchor.__super__.constructor.call(this, debug);
    }

    StartAnchor.prototype.reset = function() {
      StartAnchor.__super__.reset.call(this);
      return this.attempted = false;
    };

    StartAnchor.prototype.nextMatch = function(state, report) {
      if (this.attempted) {
        this.reset();
        return false;
      }
      if (state.input[state.currentPosition - 1] === StartGuard) {
        this.attempted = true;
        return state.currentPosition;
      }
      return false;
    };

    return StartAnchor;

  })(root.Token);

  root.EndAnchor = (function(_super) {

    __extends(EndAnchor, _super);

    function EndAnchor(debug) {
      EndAnchor.__super__.constructor.call(this, debug);
    }

    EndAnchor.prototype.reset = function() {
      EndAnchor.__super__.reset.call(this);
      return this.attempted = false;
    };

    EndAnchor.prototype.nextMatch = function(state, report) {
      if (this.attempted) {
        this.reset();
        return false;
      }
      if (state.input[state.currentPosition] === EndGuard) {
        this.attempted = true;
        return state.currentPosition;
      }
      return false;
    };

    return EndAnchor;

  })(root.Token);

  root.WordBoundary = (function(_super) {

    __extends(WordBoundary, _super);

    function WordBoundary(debug, negated) {
      this.negated = negated != null ? negated : false;
      WordBoundary.__super__.constructor.call(this, debug);
      this.wordClass = new WordClass();
    }

    WordBoundary.prototype.reset = function() {
      WordBoundary.__super__.reset.call(this);
      return this.attempted = false;
    };

    WordBoundary.prototype.nextMatch = function(state, report) {
      var leftChar, rightChar;
      if (this.attempted) {
        this.reset();
        return false;
      }
      leftChar = state.input[state.currentPosition - 1];
      rightChar = state.input[state.currentPosition];
      if ((this.wordClass.isInClass(leftChar) !== this.wordClass.isInClass(rightChar)) !== this.negated) {
        this.attempted = true;
        return state.currentPosition;
      }
      return false;
    };

    return WordBoundary;

  })(root.Token);

}).call(this);
