// Generated by CoffeeScript 1.4.0
(function() {
  var root;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.Regex = (function() {

    function Regex(regexString, report) {
      var _ref;
      if (report == null) {
        report = false;
      }
      if (report) {
        console.log("Regex string:", regexString);
      }
      _ref = new Parser().parsePattern(regexString), this.regex = _ref[0], this.nGroups = _ref[1];
      if (report) {
        console.log("Regex pattern:", this.regex);
      }
    }

    Regex.prototype.test = function(inputString, report) {
      var matcher;
      if (report == null) {
        report = false;
      }
      this.regex.reset();
      matcher = this.getMatcher(inputString);
      while (matcher.stepForward()) {
        continue;
      }
      return matcher.success;
    };

    Regex.prototype.match = function(inputString, report) {
      var matcher;
      if (report == null) {
        report = false;
      }
      this.regex.reset();
      matcher = this.getMatcher(inputString);
      while (matcher.stepForward()) {
        continue;
      }
      if (matcher.success) {
        return matcher.groups();
      } else {
        return null;
      }
    };

    Regex.prototype.getMatcher = function(inputString) {
      return new Matcher(Helper.clone(this.regex), this.nGroups, inputString);
    };

    Regex.prototype.parseInput = function(inputString) {
      var input;
      input = [StartGuard].concat(inputString.split(""));
      input.push(EndGuard);
      return input;
    };

    Regex.prototype.setupInitialState = function(str, maxGroup) {
      var i, state, _i;
      if (maxGroup == null) {
        maxGroup = 0;
      }
      state = {
        inputString: str,
        input: this.parseInput(str),
        startingPosition: 1,
        currentPosition: 1,
        captures: [],
        report: function() {
          return console.log("Current match: " + this.inputString.slice(this.startingPosition - 1, this.currentPosition - 1));
        }
      };
      for (i = _i = 0; 0 <= maxGroup ? _i <= maxGroup : _i >= maxGroup; i = 0 <= maxGroup ? ++_i : --_i) {
        state.captures[i] = void 0;
      }
      return state;
    };

    return Regex;

  })();

}).call(this);
