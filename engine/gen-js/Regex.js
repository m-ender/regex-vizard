// Generated by CoffeeScript 1.4.0
(function() {
  var root;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.Regex = (function() {

    function Regex(regexString, report) {
      if (report == null) {
        report = false;
      }
      if (report) {
        console.log("Regex string:", regexString);
      }
      this.regex = new Parser().parsePattern(regexString);
      if (report) {
        console.log("Regex pattern:", this.regex);
      }
    }

    Regex.prototype.test = function(inputString, report) {
      var i, result, state;
      if (report == null) {
        report = false;
      }
      this.regex.reset();
      if (report) {
        console.log(this.regex);
      }
      if (report) {
        console.log("Input string:", inputString);
      }
      state = this.setupInitialState(inputString, this.regex.maxGroup);
      if (report) {
        console.log("Input:", state.input);
      }
      while (state.startingPosition < state.input.length) {
        result = this.regex.nextMatch(state, report);
        while (result === 0 || result === -1) {
          result = this.regex.nextMatch(state, report);
        }
        if (result === false) {
          state.currentPosition = ++state.startingPosition;
        } else {
          break;
        }
      }
      i = 0;
      if (report) {
        console.log(state.captures);
      }
      return state.startingPosition < state.input.length;
    };

    Regex.prototype.match = function(inputString, report) {
      var i, result, state;
      if (report == null) {
        report = false;
      }
      this.regex.reset();
      if (report) {
        console.log(this.regex);
      }
      if (report) {
        console.log("Input string:", inputString);
      }
      state = this.setupInitialState(inputString, this.regex.maxGroup);
      if (report) {
        console.log("Input:", state.input);
      }
      while (state.startingPosition < state.input.length) {
        result = this.regex.nextMatch(state, report);
        while (result === 0 || result === -1) {
          result = this.regex.nextMatch(state, report);
        }
        if (result === false) {
          state.currentPosition = ++state.startingPosition;
        } else {
          break;
        }
      }
      i = 0;
      if (result === false) {
        return null;
      } else {
        return state.captures;
      }
    };

    Regex.prototype.parseInput = function(inputString) {
      var input;
      input = [StartGuard].concat(inputString.split(""));
      input.push(EndGuard);
      return input;
    };

    Regex.prototype.setupInitialState = function(str, maxGroup) {
      var i, state, _i;
      if (maxGroup == null) {
        maxGroup = 0;
      }
      state = {
        inputString: str,
        input: this.parseInput(str),
        startingPosition: 1,
        currentPosition: 1,
        captures: [],
        report: function() {
          return console.log("Current match: " + this.inputString.slice(this.startingPosition - 1, this.currentPosition - 1));
        }
      };
      for (i = _i = 0; 0 <= maxGroup ? _i <= maxGroup : _i >= maxGroup; i = 0 <= maxGroup ? ++_i : --_i) {
        state.captures[i] = void 0;
      }
      return state;
    };

    return Regex;

  })();

}).call(this);
