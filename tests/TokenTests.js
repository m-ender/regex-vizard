// Generated by CoffeeScript 1.4.0
(function() {

  TestCase("TokenTests", {
    setUp: function() {
      if (typeof module !== "undefined" && module.exports) {
        return this.Regex = new require("Regex").Regex("");
      } else {
        return this.Regex = new window.Regex("");
      }
    },
    "testCharacterToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("ab");
      token = new Character(null, "a");
      this.assertNextMatchSequence(token, state, [2]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 3;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 1;
      token = new Character(null, "b");
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, [3]);
      state.currentPosition = 3;
      return this.assertNextMatchSequence(token, state, []);
    },
    "testWildcardToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("a\nb\r");
      token = new Wildcard(null);
      this.assertNextMatchSequence(token, state, [2]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 3;
      this.assertNextMatchSequence(token, state, [4]);
      state.currentPosition = 4;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 5;
      return this.assertNextMatchSequence(token, state, []);
    },
    "testStartAnchorToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("ab");
      token = new StartAnchor(null);
      this.assertNextMatchSequence(token, state, [1]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 3;
      return this.assertNextMatchSequence(token, state, []);
    },
    "testEndAnchorToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("ab");
      token = new EndAnchor(null);
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 3;
      return this.assertNextMatchSequence(token, state, [3]);
    },
    "testDisjunctionToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("abc");
      token = new Disjunction(null);
      token.subtokens.push(new Character(null, "a"));
      token.subtokens.push(new Character(null, "b"));
      token.subtokens.push(new Character(null, "c"));
      this.assertNextMatchSequence(token, state, [2, 0, 0, 0]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, [0, 3, 0, 0]);
      state.currentPosition = 3;
      this.assertNextMatchSequence(token, state, [0, 0, 4, 0]);
      state.currentPosition = 4;
      return this.assertNextMatchSequence(token, state, [0, 0, 0]);
    },
    "testSequenceToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("abc");
      token = new Sequence(null);
      token.subtokens.push(new Character(null, "a"));
      token.subtokens.push(new Character(null, "b"));
      token.subtokens.push(new Character(null, "c"));
      this.assertNextMatchSequence(token, state, [-1, -1, 4, 0, 0, 0]);
      token = new Sequence(null);
      token.subtokens.push(new Character(null, "a"));
      token.subtokens.push(new Option(null, new Character(null, "b")));
      token.subtokens.push(new Character(null, "b"));
      return this.assertNextMatchSequence(token, state, [-1, -1, -1, 0, 0, -1, 3, 0, 0, 0]);
    },
    "testEmptySequenceToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("");
      token = new Sequence(null);
      this.assertNextMatchSequence(token, state, [1]);
      state = this.Regex.setupInitialState("a");
      this.assertNextMatchSequence(token, state, [1]);
      state.currentPosition = 2;
      return this.assertNextMatchSequence(token, state, [2]);
    },
    "testOptionToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("ab");
      token = new Option(null, new Character(null, "a"));
      this.assertNextMatchSequence(token, state, [-1, 2, 0, 1]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, [0, 2]);
      state.currentPosition = 3;
      return this.assertNextMatchSequence(token, state, [0, 3]);
    },
    "testGroupToken": function() {
      var state, token;
      state = this.Regex.setupInitialState("a");
      token = new Group(null, new Option(null, new Character(null, "a")));
      return this.assertNextMatchSequence(token, state, [-1, -1, 2, 0, -1, 1, 0]);
    },
    "testRepeatZeroOrMoreToken": function() {
      var disjunction, state, token;
      state = this.Regex.setupInitialState("aaab");
      token = new RepeatZeroOrMore(null, new Character(null, "a"));
      this.assertNextMatchSequence(token, state, [-1, -1, -1, 0, 4, 0, 3, 0, 2, 0, 1]);
      state.currentPosition = 4;
      this.assertNextMatchSequence(token, state, [0, 4]);
      state = this.Regex.setupInitialState("ab");
      disjunction = new Disjunction(null);
      disjunction.subtokens.push(new Character(null, "a"));
      disjunction.subtokens.push(new Character(null, "b"));
      token = new RepeatZeroOrMore(null, new Group(null, disjunction));
      return this.assertNextMatchSequence(token, state, [-1, -1, 0, -1, -1, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 1]);
    },
    "testRepeatOneOrMoreToken": function() {
      var disjunction, state, token;
      state = this.Regex.setupInitialState("aaab");
      token = new RepeatOneOrMore(null, new Character(null, "a"));
      this.assertNextMatchSequence(token, state, [-1, -1, -1, 0, 4, 0, 3, 0, 2, 0, 0]);
      state.currentPosition = 4;
      this.assertNextMatchSequence(token, state, [0, 0]);
      state = this.Regex.setupInitialState("ab");
      disjunction = new Disjunction(null);
      disjunction.subtokens.push(new Character(null, "a"));
      disjunction.subtokens.push(new Character(null, "b"));
      token = new RepeatOneOrMore(null, new Group(null, disjunction));
      return this.assertNextMatchSequence(token, state, [-1, -1, 0, -1, -1, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0]);
    },
    "testInfiniteLoop": function() {
      var state, token;
      state = this.Regex.setupInitialState("b");
      token = new RepeatZeroOrMore(null, new RepeatZeroOrMore(null, new Character(null, "a")));
      this.assertNextMatchSequence(token, state, [0, 0, 1]);
      token = new RepeatOneOrMore(null, new Option(null, new Character(null, "a")));
      return this.assertNextMatchSequence(token, state, [0, -1, 0, 0, 1, 0, 0]);
    },
    "testBasicCharacterClass": function() {
      var state, token;
      state = this.Regex.setupInitialState("abc");
      token = new CharacterClass(null);
      token.addCharacter("a");
      token.addCharacter("c");
      this.assertNextMatchSequence(token, state, [2]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 3;
      return this.assertNextMatchSequence(token, state, [4]);
    },
    "testNegatedCharacterClass": function() {
      var state, token;
      state = this.Regex.setupInitialState("abc");
      token = new CharacterClass(null, true);
      token.addCharacter("a");
      token.addCharacter("c");
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, [3]);
      state.currentPosition = 3;
      return this.assertNextMatchSequence(token, state, []);
    },
    "testCharacterClassRange": function() {
      var state, token;
      state = this.Regex.setupInitialState("abcd");
      token = new CharacterClass(null);
      token.addRange("a", "c");
      this.assertNextMatchSequence(token, state, [2]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, [3]);
      state.currentPosition = 3;
      this.assertNextMatchSequence(token, state, [4]);
      state.currentPosition = 4;
      return this.assertNextMatchSequence(token, state, []);
    },
    "testNestedCharacterClass": function() {
      var state, token;
      state = this.Regex.setupInitialState("0");
      token = new CharacterClass(null, false, [new DigitClass(null)]);
      return this.assertNextMatchSequence(token, state, [2]);
    },
    "testWordBoundary": function() {
      var state, token;
      state = this.Regex.setupInitialState("a_0-b");
      token = new WordBoundary(null);
      this.assertNextMatchSequence(token, state, [1]);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 3;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 4;
      this.assertNextMatchSequence(token, state, [4]);
      state.currentPosition = 5;
      this.assertNextMatchSequence(token, state, [5]);
      state.currentPosition = 6;
      this.assertNextMatchSequence(token, state, [6]);
      state = this.Regex.setupInitialState("");
      this.assertNextMatchSequence(token, state, []);
      state = this.Regex.setupInitialState("-");
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, []);
      state = this.Regex.setupInitialState("a_0-b");
      token = new WordBoundary(null, true);
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 2;
      this.assertNextMatchSequence(token, state, [2]);
      state.currentPosition = 3;
      this.assertNextMatchSequence(token, state, [3]);
      state.currentPosition = 4;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 5;
      this.assertNextMatchSequence(token, state, []);
      state.currentPosition = 6;
      this.assertNextMatchSequence(token, state, []);
      state = this.Regex.setupInitialState("");
      this.assertNextMatchSequence(token, state, [1]);
      state = this.Regex.setupInitialState("-");
      this.assertNextMatchSequence(token, state, [1]);
      state.currentPosition = 2;
      return this.assertNextMatchSequence(token, state, [2]);
    },
    assertNextMatchSequence: function(token, state, sequence) {
      var expectedResult, i, step, _i, _j, _len, _results;
      _results = [];
      for (i = _i = 1; _i <= 2; i = ++_i) {
        step = 0;
        for (_j = 0, _len = sequence.length; _j < _len; _j++) {
          expectedResult = sequence[_j];
          assertSame("Assertion failed at step " + step + ":", expectedResult, token.nextMatch(state));
          ++step;
        }
        _results.push(assertSame(false, token.nextMatch(state)));
      }
      return _results;
    }
  });

}).call(this);
