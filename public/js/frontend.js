// Generated by CoffeeScript 1.4.0
(function() {
  var regex, root, setupEngine, stepForward, subjectString;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.JQueryHelper = (function() {

    function JQueryHelper() {}

    JQueryHelper.addJQueryPlugins = function() {
      jQuery.fn.visible = function() {
        return this.css('visibility', 'visible');
      };
      jQuery.fn.invisible = function() {
        return this.css('visibility', 'hidden');
      };
      return jQuery.fn.toggleInvisibility = function() {
        return this.css('visibility', function(i, visibility) {
          if (visibility === 'visible') {
            return 'hidden';
          } else {
            return 'visible';
          }
        });
      };
    };

    return JQueryHelper;

  })();

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.ColorGenerator = (function() {

    function ColorGenerator(baseColor) {
      if (baseColor == null) {
        baseColor = '#74DDF2';
      }
      this.baseColor = jQuery.Color(baseColor);
      this.i = 0;
    }

    ColorGenerator.prototype.nextColor = function(correctHue) {
      if (correctHue == null) {
        correctHue = true;
      }
      if (correctHue) {
        return this.baseColor.hue(this.correctHue(this.baseColor.hue() + this.phi * this.i++));
      } else {
        return this.baseColor.hue(this.baseColor.hue() + this.phi * this.i++);
      }
    };

    ColorGenerator.prototype.phi = 0.61803398874989484820 * 360;

    ColorGenerator.prototype.hueCorrection = [[5, 10], [45, 30], [70, 50], [94, 70], [100, 110], [115, 125], [148, 145], [177, 160], [179, 182], [185, 188], [225, 210], [255, 250]];

    ColorGenerator.prototype.correctHue = function(hue) {
      var lx, ly, newHue, pair, _i, _len, _ref;
      hue = hue * (256 / 360) % 255;
      lx = ly = 0;
      _ref = this.hueCorrection;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (hue === pair[0]) {
          return pair[1];
        } else if (hue < pair[0]) {
          newHue = ly + (pair[1] - ly) / (pair[0] - lx) * (hue - lx);
          return Math.floor(newHue * 360 / 256);
        }
        lx = pair[0];
        ly = pair[1];
      }
    };

    return ColorGenerator;

  })();

  regex = null;

  subjectString = '';

  setupEngine = function() {
    var regexString;
    regexString = $('#input-pattern').val();
    regex = new Regex(regexString);
    subjectString = $('#input-subject').val();
    $('#output-subject').html(subjectString);
    $('#output-pattern').html(regexString);
    return $('#button-step-fw').visible();
  };

  stepForward = function() {
    var highlight, length, result, s, startPos;
    result = regex.match(subjectString, true);
    if (result) {
      startPos = result.startingPosition - 1;
      length = result.captures[0].length;
      s = $('#output-subject').html();
      console.log(s.slice(0, startPos));
      console.log(s.slice(startPos, startPos + length));
      console.log(s.slice(startPos + length));
      highlight = "" + (s.slice(0, startPos)) + "<span class='match'>" + (s.slice(startPos, startPos + length)) + "</span>" + (s.slice(startPos + length));
      return $('#output-subject').html(highlight);
    } else {
      return $('#output-subject').html("<span class='nomatch'>" + s + "</span>");
    }
  };

  $(document).ready(function() {
    var colGen, color, colors, i, _i, _j, _results;
    JQueryHelper.addJQueryPlugins();
    $('#button-start').on('click', setupEngine);
    $('#button-step-fw').on('click', stepForward);
    colors = ["aqua", "black", "blue", "fuchsia", "gray", "green", "lime", "maroon", "navy", "olive", "purple", "red", "silver", "teal", "white", "yellow"];
    colGen = new ColorGenerator({
      hue: 180,
      saturation: 1,
      lightness: 0.7,
      alpha: 1
    });
    for (i = _i = 1; _i <= 50; i = ++_i) {
      color = colGen.nextColor().toHexString();
      $('#output-colortest').append("<span style='color:" + color + ";'>" + colors[Math.floor(Math.random() * colors.length)] + "</span><wbr />");
    }
    $('#output-colortest').append("<br /><br />");
    colGen = new ColorGenerator({
      hue: 180,
      saturation: 1,
      lightness: 0.7,
      alpha: 1
    });
    _results = [];
    for (i = _j = 1; _j <= 50; i = ++_j) {
      color = colGen.nextColor(false).toHexString();
      _results.push($('#output-colortest').append("<span style='color:" + color + ";'>" + colors[Math.floor(Math.random() * colors.length)] + "</span><wbr />"));
    }
    return _results;
  });

}).call(this);
